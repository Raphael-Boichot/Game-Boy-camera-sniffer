// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// sniffer //
// ------- //

#define sniffer_wrap_target 2
#define sniffer_wrap 15

static const uint16_t sniffer_program_instructions[] = {
    0x80a0, //  0: pull   block                      
    0xa047, //  1: mov    y, osr                     
            //     .wrap_target
    0xa022, //  2: mov    x, y                       
    0x3f08, //  3: wait   0 gpio, 8              [31]
    0x2088, //  4: wait   1 gpio, 8                  
    0x2b89, //  5: wait   1 gpio, 9              [11]
    0xff00, //  6: set    pins, 0                [31]
    0xbf42, //  7: nop                           [31]
    0xaa42, //  8: nop                           [10]
    0x4008, //  9: in     pins, 8                    
    0x4078, // 10: in     null, 24                   
    0x8020, // 11: push   block                      
    0xe001, // 12: set    pins, 1                    
    0x3f09, // 13: wait   0 gpio, 9              [31]
    0x0045, // 14: jmp    x--, 5                     
    0xc000, // 15: irq    nowait 0                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sniffer_program = {
    .instructions = sniffer_program_instructions,
    .length = 16,
    .origin = -1,
};

static inline pio_sm_config sniffer_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sniffer_wrap_target, offset + sniffer_wrap);
    return c;
}

#define DATA_PINS 0
#define N_DATA_PINS 8
#define IMG_READY_PIN 8
#define CLK_PIN 9
#define ADC_READY_PIN 10
static inline void sniffer_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = sniffer_program_get_default_config(offset);
    sm_config_set_in_pins(&c, DATA_PINS);
    pio_sm_set_consecutive_pindirs(pio, sm, DATA_PINS, N_DATA_PINS, false);
    sm_config_set_in_shift(&c, true, false, N_DATA_PINS);
    pio_sm_set_consecutive_pindirs(pio, sm, IMG_READY_PIN, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, CLK_PIN, 1, false);
    sm_config_set_set_pins(&c, ADC_READY_PIN, 1);
    pio_sm_set_consecutive_pindirs(pio, sm, ADC_READY_PIN, 1, true);
//    sm_config_set_clkdiv(&c, 5);
    for (uint8_t i = DATA_PINS; i != (DATA_PINS + N_DATA_PINS); i++) pio_gpio_init(pio, i);
    pio_gpio_init(pio, IMG_READY_PIN);
    pio_gpio_init(pio, CLK_PIN);
    pio_gpio_init(pio, ADC_READY_PIN);
    pio_sm_init(pio, sm, offset, &c);
    // pio_sm_set_enabled(pio, sm, true);
}

#endif
