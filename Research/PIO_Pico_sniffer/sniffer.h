// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// sniffer //
// ------- //

#define sniffer_wrap_target 3
#define sniffer_wrap 18

static const uint16_t sniffer_program_instructions[] = {
    0x80a0, //  0: pull   block                      
    0xa047, //  1: mov    y, osr                     
    0xe080, //  2: set    pindirs, 0                 
            //     .wrap_target
    0xa022, //  3: mov    x, y                       
    0x2020, //  4: wait   0 pin, 0                   
    0x20a0, //  5: wait   1 pin, 0                   
    0x2021, //  6: wait   0 pin, 1                   
    0x20a1, //  7: wait   1 pin, 1                   
    0xa0e3, //  8: mov    osr, null                  
    0x6001, //  9: out    pins, 1                    
    0xbf42, // 10: nop                           [31]
    0xbf42, // 11: nop                           [31]
    0xaa42, // 12: nop                           [10]
    0x40c8, // 13: in     isr, 8                     
    0x8020, // 14: push   block                      
    0xa0eb, // 15: mov    osr, !null                 
    0x6001, // 16: out    pins, 1                    
    0x0046, // 17: jmp    x--, 6                     
    0xc000, // 18: irq    nowait 0                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sniffer_program = {
    .instructions = sniffer_program_instructions,
    .length = 19,
    .origin = -1,
};

static inline pio_sm_config sniffer_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sniffer_wrap_target, offset + sniffer_wrap);
    return c;
}

static inline void sniffer_program_init(PIO pio, uint sm, uint offset, uint ctrl, uint ready, uint data) {
    // creates state machine configuration object c, sets
    // to default configurations. I believe this function is auto-generated
    // and gets a name of <program name>_program_get_default_config
    // Yes, page 40 of SDK guide
    pio_sm_config c = sniffer_program_get_default_config(offset);
    // Map the state machine's GET and IN pin group to 8 pins, the `data`
    // parameter to this function is the lowest one. These groups overlap.
    sm_config_set_set_pins(&c, ctrl, 2);
    sm_config_set_out_pins(&c, ready, 1);
    sm_config_set_in_pins(&c, data);
    sm_config_set_in_shift(&c, true, false, 32);
    // Set clock division (Commented out, this one runs at full speed)
    // sm_config_set_clkdiv(&c, 5);
    // Set this pin's GPIO function (connect PIO to the pad)
    for (uint8_t i = 0; i != 2; i++) pio_gpio_init(pio, ctrl + i);
    pio_gpio_init(pio, ready);
    for (uint8_t i = 0; i != 8; i++) pio_gpio_init(pio, data + i);
    // Set the pin direction to input at the PIO (8 pins)
    pio_sm_set_consecutive_pindirs(pio, sm, ctrl, 2, false);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running (commented out, I'll start this in the C)
    // pio_sm_set_enabled(pio, sm, true);
}

#endif
